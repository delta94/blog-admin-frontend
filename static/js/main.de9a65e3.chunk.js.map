{"version":3,"sources":["components/sign-in-form/LogInForm.jsx","components/CreatePostForm/RadioInput.jsx","services/authHeader.js","components/CreatePostForm/CreatePostForm.jsx","components/PostList/DeleteConfirmation.jsx","components/PostList/PublishBtn.jsx","components/PostList/ActionBtns.jsx","components/PostList/Post.jsx","components/PostList/PostList.jsx","components/PostList/Comment.jsx","components/PostList/Comments.jsx","services/auth.js","components/CreatePostForm/PostForm.jsx","components/CreatePostForm/EditPostForm.jsx","App.js","serviceWorker.js","index.js"],"names":["LogInForm","useState","username","setUsername","password","setPassword","message","error","setError","history","useHistory","logIn","e","a","preventDefault","fetch","method","headers","mode","body","JSON","stringify","request","json","currentUser","token","localStorage","setItem","push","window","location","reload","className","onSubmit","htmlFor","type","name","required","value","onChange","target","RadioInput","handleChange","authHeader","user","parse","getItem","CreatePostForm","title","setTitle","text","setText","published","setPublished","image","setImage","imagePreview","setImagePreview","errors","setErrors","handleSubmit","postData","console","log","Authorization","response","status","scrollTo","editorRef","useRef","length","map","key","msg","encType","state","previewStyle","initialEditType","height","events","change","current","getInstance","getMarkdown","ref","initialValue","accept","URL","createObjectURL","files","reader","FileReader","readAsDataURL","onload","result","handleFile","src","alt","DeleteConfirmation","showDeleteConfirm","handleClick","postId","responseMsg","setResponseMsg","deletePost","onClick","PublishBtn","ActionBtns","changePublishedStatus","editPost","setShowDeleteConfirm","openComments","Post","timestamp","last_update","_id","data","foundPost","pathname","comments","PostList","posts","setPosts","useEffect","getPosts","post","Comment","commentId","deletedMsg","setdeletedMsg","comment","setComment","showEditForm","setShowEditForm","showActionBtns","setShowActionBtns","editComment","deleteBtn","cols","rows","defaultValue","Comments","match","setComments","params","id","commentsData","getComments","API_URL","logOut","removeItem","getUser","PostForm","btnText","EditPostForm","setMessage","App","setCurrentUser","to","auth","path","component","exact","render","props","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.de9a65e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport default function LogInForm() {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState({ message: '' });\n\n    const history = useHistory();\n    const logIn = async (e) => {\n        e.preventDefault();\n        const request = await fetch('https://julio22b-blog-api-1.glitch.me/api/log-in', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            mode: 'cors',\n            body: JSON.stringify({ username, password }),\n        });\n        const currentUser = await request.json();\n        if (currentUser.token) {\n            localStorage.setItem('currentUser', JSON.stringify(currentUser));\n            history.push('/home');\n            window.location.reload();\n            return;\n        }\n        setError(currentUser);\n        setPassword('');\n    };\n\n    return (\n        <>\n            <form className=\"log-in-form\" onSubmit={(e) => logIn(e)}>\n                <p>{error.message}</p>\n                <label htmlFor=\"username\">Username: </label>\n                <input\n                    type=\"text\"\n                    name=\"username\"\n                    required\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                />\n                <label htmlFor=\"password\">Password: </label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    required\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n                <button>Log in </button>\n            </form>\n        </>\n    );\n}\n","import React from 'react';\n\nexport default function RadioInput({ value, handleChange }) {\n    return <input type=\"radio\" name=\"published\" value={value} onChange={handleChange} />;\n}\n","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('currentUser'));\n    if (user && user.token) {\n        return `Bearer ${user.token}`;\n    } else {\n        return {};\n    }\n}\n","import React, { useState, useRef } from 'react';\nimport RadioInput from './RadioInput';\nimport authHeader from '../../services/authHeader';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor } from '@toast-ui/react-editor';\nimport { useHistory } from 'react-router-dom';\n\nexport default function CreatePostForm({ location }) {\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('');\n    const [published, setPublished] = useState(true);\n    const [image, setImage] = useState('');\n    const [imagePreview, setImagePreview] = useState('');\n    const [errors, setErrors] = useState([]);\n    const history = useHistory();\n\n    const handleSubmit = async (e) => {\n        try {\n            e.preventDefault();\n            const postData = {\n                title,\n                text,\n                published,\n                image,\n            };\n\n            console.log(postData);\n            const request = await fetch('https://julio22b-blog-api-1.glitch.me/api/post/create', {\n                method: 'post',\n                headers: { 'Content-Type': 'application/json', Authorization: authHeader() },\n                mode: 'cors',\n                body: JSON.stringify(postData),\n            });\n            const response = await request.json();\n            if (request.status === 400) {\n                setErrors(response);\n                window.scrollTo(0, 0);\n                return;\n            } else {\n                console.log(response);\n                history.push('/home');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const editorRef = useRef();\n\n    const handleFile = (e) => {\n        setImagePreview(URL.createObjectURL(e.target.files[0]));\n        const reader = new FileReader();\n        reader.readAsDataURL(e.target.files[0]);\n        reader.onload = () => {\n            setImage(reader.result);\n        };\n        console.log(reader);\n    };\n    return (\n        <>\n            <ul className=\"errors\">\n                {errors.length > 0\n                    ? errors.map((error) => <li key={error.msg}>{error.msg}</li>)\n                    : ''}\n            </ul>\n            <form\n                className=\"create-form\"\n                onSubmit={(e) => handleSubmit(e)}\n                encType=\"multipart/form-data\"\n            >\n                <label htmlFor=\"title\">Title: </label>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    required\n                    value={location.state ? location.state.title : title}\n                    onChange={(e) => setTitle(e.target.value)}\n                />\n                <label htmlFor=\"text\">Content: </label>\n                <Editor\n                    previewStyle=\"vertical\"\n                    initialEditType=\"markdown\"\n                    height=\"700px\"\n                    events={{\n                        change: () => setText(editorRef.current.getInstance().getMarkdown()),\n                    }}\n                    ref={editorRef}\n                    initialValue={location.state ? location.state.text : ''}\n                />\n                <label htmlFor=\"image\">Image: </label>\n                <input\n                    type=\"file\"\n                    name=\"image\"\n                    accept=\".png, .jpg, .jpeg\"\n                    onChange={(e) => handleFile(e)}\n                />\n                <div className=\"image-container\">\n                    <img src={imagePreview} alt=\"\" />\n                </div>\n                <div className=\"radio-btns\">\n                    <p>Publish?</p>\n                    <div>\n                        <label htmlFor=\"published\">Yes</label>\n                        <RadioInput\n                            value={'true'}\n                            handleChange={(e) => setPublished(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"published\">No</label>\n                        <RadioInput\n                            value={'false'}\n                            handleChange={(e) => setPublished(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <button>Create Post</button>\n            </form>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport authHeader from '../../services/authHeader';\n\nexport default function DeleteConfirmation({ showDeleteConfirm, handleClick, postId }) {\n    const [responseMsg, setResponseMsg] = useState('');\n    const deletePost = async () => {\n        const request = await fetch(\n            `https://julio22b-blog-api-1.glitch.me/api/post/${postId}/delete`,\n            {\n                method: 'delete',\n                mode: 'cors',\n                headers: { 'Content-Type': 'application/json', Authorization: authHeader() },\n            },\n        );\n        const response = await request.json();\n        setResponseMsg(response.message);\n    };\n    return (\n        <div className={`delete-confirmation ${showDeleteConfirm ? 'active' : ''}`}>\n            Are you sure you want to delete this post?{' '}\n            <button type=\"button\" onClick={deletePost}>\n                Yes\n            </button>{' '}\n            <button type=\"button\" onClick={handleClick}>\n                No\n            </button>\n            <p>{responseMsg}</p>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function PublishBtn({ handleSubmit, published }) {\n    return (\n        <form onSubmit={(e) => handleSubmit(e)}>\n            {published ? (\n                <div className=\"unpublish-wrapper\">\n                    <p>This post is published.</p>\n                    <button>Unpublish</button>\n                </div>\n            ) : (\n                <div className=\"publish-wrapper\">\n                    <p>This post hasn't been published.</p>\n                    <button>Publish</button>\n                </div>\n            )}\n        </form>\n    );\n}\n","import React from 'react';\nimport PublishBtn from './PublishBtn';\n\nexport default function ActionBtns({\n    published,\n    changePublishedStatus,\n    editPost,\n    setShowDeleteConfirm,\n    openComments,\n}) {\n    return (\n        <div className=\"action-btns\">\n            <PublishBtn published={published} handleSubmit={changePublishedStatus} />\n            <div className=\"delete-edit-wrapper\">\n                <button type=\"button\" className=\"edit-btn\" onClick={openComments}>\n                    See comments\n                </button>\n                <button type=\"button\" className=\"edit-btn\" onClick={editPost}>\n                    Edit\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"delete-btn\"\n                    onClick={() => setShowDeleteConfirm(true)}\n                >\n                    Delete\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport authHeader from '../../services/authHeader';\nimport DeleteConfirmation from './DeleteConfirmation';\nimport { useHistory } from 'react-router-dom';\nimport ActionBtns from './ActionBtns';\n\nexport default function Post({\n    title,\n    timestamp,\n    last_update,\n    published,\n    _id,\n    currentUser,\n    image,\n}) {\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n    const history = useHistory();\n\n    const changePublishedStatus = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await fetch(\n                `https://julio22b-blog-api-1.glitch.me/api/post/${_id}/update-published-status`,\n                {\n                    method: 'put',\n                    mode: 'cors',\n                    headers: { 'Content-Type': 'application/json', Authorization: authHeader() },\n                    body: JSON.stringify({\n                        published: !published,\n                    }),\n                },\n            );\n            const data = await response.json();\n            console.log(data);\n            window.location.reload();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const editPost = async () => {\n        const response = await fetch(`https://julio22b-blog-api-1.glitch.me/api/post/${_id}`);\n        const data = await response.json();\n        console.log(data);\n        const { title, text, published, image } = data.foundPost;\n        history.push({\n            pathname: `/post/${_id}/edit`,\n            state: { title, text, published, _id, image },\n        });\n    };\n\n    const openComments = async () => {\n        const response = await fetch(\n            `https://julio22b-blog-api-1.glitch.me/api/post/${_id}/comments`,\n        );\n        const comments = await response.json();\n        history.push({ pathname: `/post/${_id}/comments`, state: { comments } });\n    };\n\n    return (\n        <>\n            <article className=\"post\">\n                <h2>{title}</h2>\n                <figure>\n                    <img src={image} alt=\"\" />\n                    <figcaption>\n                        <p className=\"timestamps\">\n                            <span className=\"date\">Created on {timestamp} </span>\n                            <span className=\"last-update\">\n                                Last updated on: {last_update || 'No updates yet.'}\n                            </span>\n                        </p>\n                    </figcaption>\n                </figure>\n                {currentUser && (\n                    <ActionBtns\n                        published={published}\n                        changePublishedStatus={changePublishedStatus}\n                        editPost={editPost}\n                        setShowDeleteConfirm={setShowDeleteConfirm}\n                        openComments={openComments}\n                    />\n                )}\n            </article>\n            <DeleteConfirmation\n                showDeleteConfirm={showDeleteConfirm}\n                handleClick={() => setShowDeleteConfirm(false)}\n                postId={_id}\n            />\n        </>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Post from './Post';\n\nexport default function PostList({ currentUser }) {\n    const [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        const getPosts = async () => {\n            const request = await fetch('https://julio22b-blog-api-1.glitch.me/api/posts');\n            const posts = await request.json();\n            setPosts(posts);\n        };\n        getPosts();\n    }, []);\n\n    return (\n        <>\n            <section className=\"post-list\">\n                {posts.map((post) => (\n                    <Post\n                        title={post.title}\n                        timestamp={post.timestamp}\n                        last_update={post.last_update}\n                        published={post.published}\n                        key={post._id}\n                        _id={post._id}\n                        currentUser={currentUser}\n                        image={post.image}\n                    />\n                ))}\n            </section>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport authHeader from '../../services/authHeader';\n\nexport default function Comment({ postId, commentId, username, timestamp, text }) {\n    const [deletedMsg, setdeletedMsg] = useState('');\n    const [comment, setComment] = useState('');\n    const [showEditForm, setShowEditForm] = useState(false);\n    const [showActionBtns, setShowActionBtns] = useState(true);\n    const editComment = async (e) => {\n        e.preventDefault();\n        const response = await fetch(\n            `http://localhost:4000/api/post/${postId}/comments/${commentId}`,\n            {\n                method: 'put',\n                mode: 'cors',\n                headers: { 'Content-Type': 'application/json', Authorization: authHeader() },\n                body: JSON.stringify({ comment }),\n            },\n        );\n        const data = await response.json();\n        setComment(data.text);\n        setShowEditForm(!showEditForm);\n    };\n\n    const deleteBtn = async () => {\n        try {\n            const response = await fetch(\n                `https://julio22b-blog-api-1.glitch.me/api/post/${postId}/comments/${commentId}`,\n                {\n                    method: 'delete',\n                    mode: 'cors',\n                    headers: { 'Content-Type': 'application/json', Authorization: authHeader() },\n                },\n            );\n            const data = await response.json();\n            setdeletedMsg(data.message);\n            setShowActionBtns(!showActionBtns);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n    return (\n        <article className=\"comment\">\n            <div>\n                <h5>{username}</h5>\n                <span className=\"date\">{timestamp}</span>\n            </div>\n            <p className=\"comment-text\">{comment || text}</p>\n            {showActionBtns && (\n                <div className=\"buttons\">\n                    <button\n                        className=\"edit-btn\"\n                        onClick={() => setShowEditForm(!showEditForm)}\n                        type=\"button\"\n                    >\n                        Edit\n                    </button>\n                    <button className=\"delete-btn\" onClick={deleteBtn} type=\"button\">\n                        Delete\n                    </button>\n                </div>\n            )}\n            <p>{deletedMsg}</p>\n            <form className={showEditForm ? 'active' : ''} onSubmit={(e) => editComment(e)}>\n                <textarea\n                    name=\"comment\"\n                    cols=\"30\"\n                    rows=\"5\"\n                    onChange={(e) => setComment(e.target.value)}\n                    defaultValue={text}\n                ></textarea>\n                <button>Send</button>\n            </form>\n        </article>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport Comment from './Comment';\n\nexport default function Comments({ location, match }) {\n    const [comments, setComments] = useState([]);\n    useEffect(() => {\n        const getComments = async () => {\n            try {\n                const response = await fetch(\n                    `https://julio22b-blog-api-1.glitch.me/api/post/${match.params.id}/comments`,\n                );\n                const commentsData = await response.json();\n                setComments(commentsData);\n            } catch (err) {\n                console.log(err);\n            }\n        };\n        getComments();\n    }, [match.params.id]);\n\n    return (\n        <section className=\"comments-section\">\n            {comments.map((comment) => (\n                <Comment\n                    postId={match.params.id}\n                    commentId={comment._id}\n                    username={comment.username}\n                    text={comment.text}\n                    timestamp={comment.timestamp}\n                    key={comment._id}\n                />\n            ))}\n        </section>\n    );\n}\n","const API_URL = 'http://localhost:4000/api';\n\nasync function logIn(username, password) {\n    const request = await fetch(`${API_URL}/log-in`, {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n        body: JSON.stringify({ username, password }),\n    });\n    const user = await request.json();\n    if (user.token) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n    }\n    console.log(user);\n    return user;\n}\n\nfunction logOut() {\n    localStorage.removeItem('currentUser');\n}\n\nfunction getUser() {\n    return JSON.parse(localStorage.getItem('currentUser'));\n}\n\nexport default { logIn, logOut, getUser };\n","import React, { useRef } from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor } from '@toast-ui/react-editor';\nimport RadioInput from './RadioInput';\n\nexport default function PostForm({\n    handleSubmit,\n    state,\n    setTitle,\n    setText,\n    setPublished,\n    setImage,\n    image,\n    btnText,\n}) {\n    const editorRef = useRef();\n    const handleFile = (e) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(e.target.files[0]);\n        reader.onload = () => {\n            setImage(reader.result);\n        };\n    };\n    return (\n        <form\n            className=\"create-form\"\n            onSubmit={(e) => handleSubmit(e)}\n            encType=\"multipart/form-data\"\n        >\n            <label htmlFor=\"title\">Title: </label>\n            <input\n                type=\"text\"\n                name=\"title\"\n                required\n                defaultValue={state ? state.title : ''}\n                onChange={(e) => setTitle(e.target.value)}\n            />\n            <label htmlFor=\"text\">Content: </label>\n            <Editor\n                previewStyle=\"vertical\"\n                initialEditType=\"markdown\"\n                height=\"700px\"\n                events={{ change: () => setText(editorRef.current.getInstance().getMarkdown()) }}\n                ref={editorRef}\n                initialValue={state ? state.text : ''}\n            />\n            <label htmlFor=\"image\">Image: </label>\n            <input type=\"file\" name=\"image\" onChange={(e) => handleFile(e)} />\n            <div className=\"image-container\">\n                <img src={image} alt=\"\" />\n            </div>\n            <div className=\"radio-btns\">\n                <p>Publish?</p>\n                <div>\n                    <label htmlFor=\"published\">Yes</label>\n                    <RadioInput value={'true'} handleChange={(e) => setPublished(e.target.value)} />\n                </div>\n                <div>\n                    <label htmlFor=\"published\">No</label>\n                    <RadioInput\n                        value={'false'}\n                        handleChange={(e) => setPublished(e.target.value)}\n                    />\n                </div>\n            </div>\n            <button>{btnText}</button>\n        </form>\n    );\n}\n","import React, { useState } from 'react';\nimport PostForm from './PostForm';\nimport authHeader from '../../services/authHeader';\nimport { useHistory } from 'react-router-dom';\n\nexport default function EditPostForm({ location }) {\n    const [title, setTitle] = useState(location.state.title || '');\n    const [text, setText] = useState(location.state.text || '');\n    const [published, setPublished] = useState(location.state.published);\n    const [image, setImage] = useState(location.state.image || '');\n    const [message, setMessage] = useState('');\n    const history = useHistory();\n\n    window.scrollTo(0, 0);\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const request = await fetch(\n                `https://julio22b-blog-api-1.glitch.me/api/post/${location.state._id}/update`,\n                {\n                    method: 'put',\n                    mode: 'cors',\n                    headers: { 'Content-Type': 'application/json', Authorization: authHeader() },\n                    body: JSON.stringify({ title, text, published, image }),\n                },\n            );\n            const response = await request.json();\n            console.log(response);\n            setMessage(response.msg);\n            history.push('/home');\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    return (\n        <>\n            <p>{message}</p>\n            <PostForm\n                handleSubmit={handleSubmit}\n                state={location.state}\n                setTitle={setTitle}\n                setText={setText}\n                setPublished={setPublished}\n                setImage={setImage}\n                image={image}\n                btnText={'Edit Post'}\n            />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport './styles/style.css';\nimport LogInForm from './components/sign-in-form/LogInForm';\nimport CreatePostForm from './components/CreatePostForm/CreatePostForm';\nimport PostList from './components/PostList/PostList';\nimport Comments from './components/PostList/Comments';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport auth from './services/auth';\nimport EditPostForm from './components/CreatePostForm/EditPostForm';\n\n// render={(props) => <PropsPage {...props} title={`Props through render`} />}\nfunction App() {\n    const [currentUser, setCurrentUser] = useState(JSON.parse(localStorage.getItem('currentUser')));\n    const handleLogOut = () => {\n        setCurrentUser('');\n        auth.logOut();\n    };\n    return (\n        <>\n            <Router>\n                <header>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/home\">Home</Link>\n                            </li>\n                            {currentUser ? (\n                                <>\n                                    <li>\n                                        <Link to=\"/create\">Create post</Link>\n                                    </li>\n                                    <li>\n                                        <Link to=\"/log-in\">\n                                            <button onClick={handleLogOut}>Log out</button>\n                                        </Link>\n                                    </li>\n                                </>\n                            ) : (\n                                <li>\n                                    <Link to=\"/log-in\">Log in</Link>\n                                </li>\n                            )}\n                        </ul>\n                    </nav>\n                </header>\n                {currentUser ? (\n                    <h2>Hello {currentUser.username}.</h2>\n                ) : (\n                    <h2>Log in to create and edit your posts.</h2>\n                )}\n\n                {!currentUser && <Route path=\"/log-in\" component={LogInForm} />}\n                <Switch>\n                    <Route\n                        path=\"/home\"\n                        exact\n                        render={(props) => <PostList {...props} currentUser={currentUser} />}\n                    />\n                    <Route path=\"/create\" exact component={CreatePostForm} />;\n                    <Route\n                        path=\"/post/:id/edit\"\n                        exact\n                        render={(props) => <EditPostForm {...props} />}\n                    />\n                    <Route path=\"/post/:id/comments\" exact component={Comments} />\n                </Switch>\n            </Router>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}